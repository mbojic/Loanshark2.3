/*
 * File: app/controller/Debt.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Payback.controller.Debt', {
    extend: 'Ext.app.Controller',

    config: {
        stores: [
            'DebtsStore'
        ],
        views: [
            'Debts',
            'DebtDetail'
        ],

        refs: {
            addDebt: 'button#addDebt',
            deleteDebt: 'button#deleteDebt',
            cancelDebt: 'button#cancelDebt',
            emailDebt: 'button#emailDebt',
            saveDebt: 'button#saveDebt',
            addPayment: 'button#addPayment',
            contactName: 'selectfield#preySelectField',
            debtHeaderLabel: 'label#debtHeaderLabel',
            paymentHistoryLabel: 'label#paymentHistoryLabel',
            paymentDataView: 'dataview#paymentDataView',
            debtDetail: {
                autoCreate: true,
                selector: 'formpanel#DebtDetail',
                xtype: 'DebtDetail'
            },
            contactDetail: 'formpanel#ContactDetail',
            paymentDetail: 'formpanel#PaymentDetail',
            mainView: 'tabpanel#MainView',
            debts: 'panel#Debts',
            debtDataView: 'dataview#debtDataView',
            contactDetailDebtDataView: '#ContactDetail dataview#debtDataView'
        },

        control: {
            "button#addDebt": {
                tap: 'onAddDebtTap'
            },
            "#debtDataView #debtListItemDetail #deleteDebt": {
                tap: 'onDeleteDebtTap'
            },
            "dataview#debtDataView": {
                itemtap: 'onDebtTap',
                itemswipe: 'onDebtDataviewItemSwipe'
            },
            "#cancelDebt": {
                tap: 'onCancelDebtTap'
            },
            "#saveDebt": {
                tap: 'onSaveDebtTap'
            },
            "button#emailDebt": {
                tap: 'onEmailTap'
            },
            "#MainView": {
                activeitemchange: 'onMainViewActiveItemChange',
                deactivate: 'onMainViewDeactivate'
            },
            "#DebtDetail": {
                activate: 'onDebtDetailActivate'
            },
            "#ContactDetail": {
                deactivate: 'onContactDetailDeactivate'
            }
        }
    },

    onAddDebtTap: function(button, e, eOpts) {
        //reset record
        this.getDebtDetail().setRecord(null);

        //activate contact detail view
        Ext.Viewport.setActiveItem(this.getDebtDetail());

        //if we are coming from contact detail, preset the correct person
        if (this.debtDetailPredecesor === this.getContactDetail()) {
            this.getDebtDetail().setValues({'person_id': this.getContactDetail().getRecord().get('id')});
        }
    },

    onDeleteDebtTap: function(button, e, eOpts) {
        //prevent event triggering onDebtTap by accident
        e.stopEvent();

        var debt = button.getData(),
            person,
            peopleStore = Ext.getStore('PeopleStore'),
            debtsStore = Ext.getStore('DebtsStore'),
            paymentStore = Ext.getStore('PaymentStore');

        person = peopleStore.findRecord('id', debt.get('person_id'));

        //if a debt is deleted inside contact detail
        if (this.getContactDetail()) {

            //reset delete buttons
            this.resetDeleteButtonsDebtDataView(true);

        } else {
            //reset delete buttons
            this.resetDeleteButtonsDebtDataView();
        }

        debt.cascadeDelete();

        paymentStore.load();
        debtsStore.load();

        person.calcBalance();

        peopleStore.load();

        //after stores have been reloaded, update header label and re-filter the store
        if (this.getContactDetail()) {
            //update contact detail header
            this.getContactDetail().updateContactHeaderLabel();

            //reapply filter
            debtsStore.filter('person_id', person.get('id'));
        }
    },

    onDebtTap: function(dataview, index, target, record, e, eOpts) {
        //set record for the contact detail
        var debtDetail = this.getDebtDetail(),
            paymentStore = Ext.getStore('PaymentStore'),
            totalBalanceString;

        debtDetail.setRecord(record);

        //save who owned the debt before editing
        //we will have to check if this has changed when saving
        //in order to assign dependencies correctly
        this.originalDebtOwner = record.get('person_id');

        //filter the debt store to show only relevant debts
        paymentStore.clearFilter();
        paymentStore.filter("debt_id", record.get('id'));

        //activate contact detail view
        Ext.Viewport.setActiveItem(debtDetail);
    },

    onCancelDebtTap: function(button, e, eOpts) {
        //reset form
        this.getDebtDetail().reset();

        //reset record
        this.getDebtDetail().setRecord(null);

        //reset animation
        this.getDebtDetail().resetTransition();

        //decide whether to return to mainView or ContactDetail
        if (this.debtDetailPredecesor === this.getMainView() || !this.debtDetailPredecesor) {
            //return to main view
            Ext.Viewport.setActiveItem(this.getMainView());
        } else if (this.debtDetailPredecesor === this.getContactDetail()) {
            //return to contact detail
            Ext.Viewport.setActiveItem(this.getContactDetail());
        }


    },

    onSaveDebtTap: function(button, e, eOpts) {
        var debtDetail = this.getDebtDetail(),
            record = debtDetail.getRecord(),
            values = debtDetail.getValues(),
            peopleStore = Ext.getStore('PeopleStore'),
            debtsStore = Ext.getStore('DebtsStore'),
            personNew = peopleStore.findRecord('id', values.person_id),
            personOld;

        //set personOld if possible
        if (record) {
            personOld = peopleStore.findRecord('id', record.get('person_id'));
        }

        //check that at least the name is specified
        if (!values.date || !values.amount) {
            new Ext.MessageBox().show({
                message: 'A loan should have a date and an amount!'
            });
        //don't allow 0 or negative debts
        } else if (values.amount <= 0) {
            new Ext.MessageBox().show({
                message: 'A loan should be a positive amount!'
            });
        //if a debt is being modified, balance is not allowed to go negative
        } else if (record && values.amount < record.get('balance')) {
            new Ext.MessageBox().show({
                message: 'This debt already has $ ' + record.get('balance') + ' in payments. You cannot set it lower than that.'
            });
        } else {
            //check if owner was modified
            if(personOld && personNew !== personOld) {
                //in this case remove the record and recreate it with the new owner
                debtsStore.remove(record);
                record = Ext.create('Payback.model.Debt', values);
                record.calcBalance();
                debtsStore.add(record);
            } else if(record) {
                //save values to the record
                record.set(values);
                record.calcBalance();
                record.save();
            } else {
                //else create a new record
                record = Ext.create('Payback.model.Debt', values);
                record.calcBalance();
                debtsStore.add(record);
            }

            //update person balance
            personNew.calcBalance();
            //update old person balance if necessary
            if (personOld && personNew !== personOld) {
                personOld.calcBalance();
            }

            //reset form
            debtDetail.reset();
            //reset record
            debtDetail.setRecord(null);

            //reset animation
            this.getDebtDetail().resetTransition();

            //decide whether to return to mainView or ContactDetail
            if (this.debtDetailPredecesor === this.getMainView() || !this.debtDetailPredecesor) {
                //return to main view
                Ext.Viewport.setActiveItem(this.getMainView());
            } else if (this.debtDetailPredecesor === this.getContactDetail()) {
                //return to contact detail
                Ext.Viewport.setActiveItem(this.getContactDetail());
            }

            debtsStore.load();
            peopleStore.load();
        }
    },

    onEmailTap: function(button, e, eOpts) {
        var record = this.getDebtDetail().getRecord(),
            person = Ext.getStore('PeopleStore').findRecord('id', record.get('person_id')),
            subject = encodeURIComponent("Where's my money?!"),
            body;

        //if debt is paid off, set up a friendly message
        if (record.get('balance') === 0) {
            body = encodeURIComponent("Dear " + person.get('name') + "," +
                                      "\n\nJust joking - you paid off your debt of $ " + record.get('amount').toFixed(2) + ' fully.' +
                                      "\n\nNice doing business with you. Always happy to lend you more again." +
                                      "\n\nSincerely," +
                                      "\n\nYour friendly neighborhood loanshark");
        //otherwise a threatening one
        } else {
            body = encodeURIComponent("Dear " + person.get('name') + "," +
                                      "\n\nYou still owe me $ " + record.get('balance').toFixed(2) +
                                      " of $ " + record.get('amount').toFixed(2) + " that you borrowed from me on " + (record.get('date').getMonth()+1) + "/" + (record.get('date').getDate()) + "." +
                                      "\n\nPay soon or my friend Li'l Abe will come pay you a visit." +
                                      "\n\nSincerely," +
                                      "\n\nYour friendly neighborhood loanshark");
        }


        window.location.href = "mailto:"+person.get('email')+"?subject="+subject+"&body="+body;

    },

    onMainViewActiveItemChange: function(container, value, oldValue, eOpts) {
        var peopleStore = Ext.getStore('PeopleStore');

        //enable addDebt button only if there is a contact
        //you cannot add debts that aren't assigned to someone
        if (value.id==='Debts') {
            if (peopleStore.getCount() <= 0) {
                this.getAddDebt().disable();
            } else {
                this.getAddDebt().enable();
            }
        }

        //make sure if we go to a different tab then contacts that
        //delete buttons are resetted
        if (oldValue === this.getDebts()) {
            this.resetDeleteButtonsDebtDataView();
        }

    },

    onDebtDetailActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        var record = this.getDebtDetail().getRecord();

        //scroll to top
        this.getDebtDetail().getScrollable().getScroller().scrollTo(0, 0, false);

        if (record) {

            //show payment history and add payment button
            this.getPaymentHistoryLabel().show();
            this.getPaymentDataView().show();

            //show payment button if debt is not paid off
            if (record.get('balance') > 0) {
                this.getAddPayment().show();
            } else {
                this.getAddPayment().hide();
            }
            this.getDebtHeaderLabel().show();
            this.getEmailDebt().show();

            //filter the debt store to show only relevant debts
            Ext.getStore('PaymentStore').clearFilter();
            Ext.getStore('PaymentStore').filter("debt_id", record.get('id'));

            //update header label
            this.getDebtDetail().updateDebtHeaderLabel();

        } else {
            //hide payment history - there is none yet
            this.getPaymentHistoryLabel().hide();
            this.getPaymentDataView().hide();
            this.getAddPayment().hide();
            this.getDebtHeaderLabel().hide();
            this.getEmailDebt().hide();
        }

        //save breadcrumbs (previous view so we can return to it)
        //if we're coming from payment detail, don't set the predecesor
        if (oldActiveItem !== this.getPaymentDetail()) {
            this.debtDetailPredecesor = oldActiveItem;
        }

        if (this.debtDetailPredecesor === this.getContactDetail()) {
            //prepare transition in case a debtDetail is tapped
            this.getContactDetail().setTransition();
        }

    },

    onDebtDataviewItemSwipe: function(dataview, index, target, record, e, eOpts) {
        var nrItems = dataview.getStore().getCount(),
            i;

        //activate on left swipe only
        if (e.direction === 'left') {
            //turn off all other delete buttons in items
            for (i = 0; i < nrItems; i++) {
                if (i !== index) {
                    dataview.getItemAt(i).hideDeleteButton();
                }
            }
            target.showDeleteButton();
        }

        //and deactivate on right swipe
        if (e.direction === 'right') {
            target.hideDeleteButton();
        }
    },

    onContactDetailDeactivate: function(oldActiveItem, container, newActiveItem, eOpts) {
        //make sure all delete buttons are resetted after switching a view
        this.resetDeleteButtonsDebtDataView(true);

    },

    onMainViewDeactivate: function(oldActiveItem, container, newActiveItem, eOpts) {
        //make sure all delete buttons are resetted after switching a view
        this.resetDeleteButtonsDebtDataView();

    },

    resetDeleteButtonsDebtDataView: function(contactDetail) {
        //hides all delete buttons in debtDataView
        var nrItems,
            dataview,
            i;

        if (contactDetail) {
            dataview = this.getContactDetailDebtDataView();

        } else {
            dataview = this.getDebtDataView();
        }

        nrItems = dataview.getStore().getCount();

        for (i = 0; i < nrItems; i++) {
            if (dataview.getItemAt(i)) {
                dataview.getItemAt(i).hideDeleteButton();
            }
        }
    }

});