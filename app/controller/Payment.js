/*
 * File: app/controller/Payment.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Payback.controller.Payment', {
    extend: 'Ext.app.Controller',

    config: {
        stores: [
            'PaymentStore'
        ],
        views: [
            'PaymentDetail'
        ],

        refs: {
            cancelPayment: 'button#cancelPayment',
            savePayment: 'button#savePayment',
            paymentDetail: {
                autoCreate: true,
                selector: 'formpanel#PaymentDetail',
                xtype: 'PaymentDetail'
            },
            debtDetail: 'formpanel#DebtDetail',
            paymentDataView: 'dataview#paymentDataView'
        },

        control: {
            "button#addPayment": {
                tap: 'onAddPayment'
            },
            "#cancelPayment": {
                tap: 'onCancelPayment'
            },
            "#savePayment": {
                tap: 'onSavePayment'
            },
            "#paymentDataView #paymentListItemDetail #deletePayment": {
                tap: 'onDeletePayment'
            },
            "#PaymentDetail": {
                activate: 'onPaymentDetailActivate'
            },
            "dataview#paymentDataView": {
                itemtap: 'onPaymentTap',
                itemswipe: 'onPaymentDataviewItemSwipe'
            },
            "#DebtDetail": {
                deactivate: 'onDebtDetailDeactivate'
            }
        }
    },

    onAddPayment: function(button, e, eOpts) {
        //reset record
        this.getPaymentDetail().setRecord(null);

        //set the debt that this payment should be added to
        this.getPaymentDetail().setValues({
            debt_id: this.getDebtDetail().getRecord().get('id')
        });

        //activate contact detail view
        Ext.Viewport.setActiveItem(this.getPaymentDetail());
    },

    onCancelPayment: function(button, e, eOpts) {
        //reset form
        this.getPaymentDetail().reset();
        //reset record
        this.getPaymentDetail().setRecord(null);
        //return to debtDetailView view
        Ext.Viewport.setActiveItem(this.getDebtDetail());
    },

    onSavePayment: function(button, e, eOpts) {
        var paymentDetail = this.getPaymentDetail(),
            record = paymentDetail.getRecord(),
            values = paymentDetail.getValues(),
            paymentStore = Ext.getStore('PaymentStore'),
            debtsStore = Ext.getStore('DebtsStore'),
            peopleStore = Ext.getStore('PeopleStore'),
            debt = debtsStore.findRecord('id', values.debt_id);
            person = peopleStore.findRecord('id', debt.get('person_id'));

        //check that an amount is specified
        if (!values.amount) {
            new Ext.MessageBox().show({
                message: 'A payment should have an amount!'
            });
        //check that this payment does not exceed balance left on debt
        //if it's amount being added, check against current balance
        //if it's being modified, check if it's larger than previous
        } else if (!record && values.amount > debt.get('balance')) {
            new Ext.MessageBox().show({
                message: "That's way too much! Last payment should not be more than $ " + debt.get('balance').toFixed(2)
            });
        } else if (record && values.amount > (debt.get('balance') + record.get('amount'))) {
            new Ext.MessageBox().show({
                message: "That's way too much! Last payment should not be more than $ " + (debt.get('balance') + record.get('amount')).toFixed(2)
            });
        } else {
            if(record) {
                //save values to the record
                record.set(values);
                record.save();
            } else {
                //else create a new record
                record = Ext.create('Payback.model.Payment', values);
                //set the current date
                record.set('date', new Date());
                paymentStore.add(record);
            }
            //calculate new debt balance
            debt.calcBalance();
            //calculate new person balance
            person.calcBalance();

            //reset form
            paymentDetail.reset();
            //reset record
            paymentDetail.setRecord(null);

            //return to debtDetail view
            Ext.Viewport.setActiveItem(this.getDebtDetail());

            //reload stores
            paymentStore.load();
            debtsStore.load();
            peopleStore.load();

        }

    },

    onDeletePayment: function(button, e, eOpts) {
        //prevent event triggering onDebtTap by accident
        e.stopEvent();

        var payment = button.getData(),
            debt,
            person,
            peopleStore = Ext.getStore('PeopleStore'),
            debtsStore = Ext.getStore('DebtsStore'),
            paymentStore = Ext.getStore('PaymentStore');

        //reset delete buttons
        this.resetDeleteButtonsPaymentDataView();

        //find the debt and person connected to the payment
        debt = debtsStore.findRecord('id', payment.get('debt_id'));
        person = peopleStore.findRecord('id', debt.get('person_id'));

        //remove payment
        payment.erase();

        paymentStore.load();

        debt.calcBalance();

        debtsStore.load();

        person.calcBalance();

        peopleStore.load();

        this.getDebtDetail().updateDebtHeaderLabel();

        //reapply filter
        paymentStore.filter('debt_id', debt.get('id'));

    },

    onPaymentDetailActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        //scroll to top
        this.getPaymentDetail().getScrollable().getScroller().scrollTo(0, 0, false);

        //prepare transition
        this.getDebtDetail().setTransition();
    },

    onPaymentTap: function(dataview, index, target, record, e, eOpts) {
        //set record for the contact detail
        var paymentDetail = this.getPaymentDetail();

        paymentDetail.setRecord(record);

        //activate payment detail view
        Ext.Viewport.setActiveItem(paymentDetail);
    },

    onPaymentDataviewItemSwipe: function(dataview, index, target, record, e, eOpts) {
        var nrItems = dataview.getStore().getCount(),
            i;

        //activate on left swipe only
        if (e.direction === 'left') {
            //turn off all other delete buttons in items
            for (i = 0; i < nrItems; i++) {
                if (i !== index) {
                    dataview.getItemAt(i).hideDeleteButton();
                }
            }
            target.showDeleteButton();
        }

        //and deactivate on right swipe
        if (e.direction === 'right') {
            target.hideDeleteButton();
        }
    },

    onDebtDetailDeactivate: function(oldActiveItem, container, newActiveItem, eOpts) {
        this.resetDeleteButtonsPaymentDataView();
    },

    resetDeleteButtonsPaymentDataView: function() {
        //hides all delete buttons in paymentDataView
        var nrItems = this.getPaymentDataView().getStore().getCount(),
            i;

        for (i = 0; i < nrItems; i++) {
            if (this.getPaymentDataView().getItemAt(i)) {
                this.getPaymentDataView().getItemAt(i).hideDeleteButton();
            }
        }
    }

});